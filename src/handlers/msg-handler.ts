import type { TelegramLikeBot as TelegramBot, TgMessage } from '../tg-client.js';
import { analyzeImage, createThread } from './openai-handler.js';
import {
  findUser,
  createUser,
  updateUser,
  decreaseRequests,
  canConsumeRequest,
  getUserStats,
} from './supabase-handler.js';
import {
  handlePreCheckout,
  handleSuccessfulPayment,
  showPricing,
  checkPaymentStatus,
} from './payment-handler.js';
import { showTermsOfService, hasAcceptedTerms } from './terms-handler.js';
import { createMainKeyboard } from './handler-utils.js';
import { handlePhotoGeneration } from './flows/image.js';
import { handleVideoGeneration } from './flows/video.js';
import { handleTextGeneration } from './flows/text.js';
import { logInteraction } from '../utils/logger.js';
export { handleVoiceMessage } from './flows/voice.js';
export { handleCallbackQuery } from './flows/callbacks.js';

export async function handleTextMessage(bot: TelegramBot, msg: TgMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const text = msg.text;

  if (!userId || !text) {
    return;
  }

  try {
    let user = await findUser(userId);
    if (!user) {
      const thread = await createThread();
      user = await createUser(userId, thread.id);
    }

    if (!user) {
      await bot.sendMessage(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
      return;
    }

    if (text.startsWith('/start')) {
      await logInteraction({
        userId,
        chatId,
        direction: 'user',
        type: 'text',
        content: text,
      });
      await bot.sendMessage(
        chatId,
        `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏: ChatGPT 5, /Midjourney, Veo 3 –∏ –¥—Ä—É–≥–∏–µ.

–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã: GPT-4.1 mini, DeepSeek, Gemini 2.5, GPT Images –∏ Perplexity web search.

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:

üìù –¢–ï–ö–°–¢: –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç (–≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /model).

üîé –ü–û–ò–°–ö: –Ω–∞–∂–º–∏—Ç–µ /s –¥–ª—è —É–º–Ω–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞.

üåÖ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: –≤—ã–±–µ—Ä–∏—Ç–µ /photo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫.

üé¨ –í–ò–î–ï–û: –Ω–∞–∂–º–∏—Ç–µ /video, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ /premium).`,
        { reply_markup: createMainKeyboard() },
      );
      return;
    }

    if (text === 'üìù ChatGPT' || text === '/text') {
      if (user.current_mode !== 'text') {
        await updateUser(userId, { current_mode: 'text' });
      }
      await bot.sendMessage(chatId, '–í—ã –≤ —Ä–µ–∂–∏–º–µ ChatGPT. –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç üëá', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    if (text === 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' || text === '/photo') {
      if (user.current_mode !== 'photo') {
        await updateUser(userId, { current_mode: 'photo' });
      }
      await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —á–∞—Ç üëá –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    if (text === 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ' || text === '/video') {
      if (user.current_mode !== 'video') {
        await updateUser(userId, { current_mode: 'video' });
      }
      await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —á–∞—Ç üëá –¥–ª—è –≤–∏–¥–µ–æ', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    if (text === '‚ú® –ü—Ä–µ–º–∏—É–º' || text === '/pay') {
      await showPricing(bot, chatId);
      return;
    }

    if (text === '/status') {
      await checkPaymentStatus(bot, chatId, userId);
      return;
    }

    if (text === '/help') {
      const helpMessage = `üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ BrainAI Bot**

              üñº **–ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
              ‚Ä¢ --ar 16:9 : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
              ‚Ä¢ --fast : –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
              ‚Ä¢ --turbo : –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
              ‚Ä¢ --relax : –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

              üé¨ **–ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞ –≤–∏–¥–µ–æ:**
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
              ‚Ä¢ --res 720p : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
              ‚Ä¢ --dur 10 : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
              ‚Ä¢ --fps 30 : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É

              üí¨ **–ö–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:**
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

              ‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
              /photo - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
              /text - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
              /video - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –≤–∏–¥–µ–æ
              /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
              /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`;

      await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
      return;
    }

    // Check if terms are accepted before processing content
    const termsAccepted = await hasAcceptedTerms(userId);
    if (!termsAccepted) {
      await showTermsOfService(bot, chatId, userId);
      return;
    }

    // Get current user data with updated info
    user = await findUser(userId);
    if (!user) {
      await bot.sendMessage(
        chatId,
        '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–∞—á–∞–ª–∞.',
      );
      return;
    }

    // Handle different modes
    const currentMode = user.current_mode ?? 'text';

    await logInteraction({
      userId,
      chatId,
      direction: 'user',
      type: 'text',
      content: text,
    });
    if (currentMode === 'photo') {
      await handlePhotoGeneration(bot, msg);
    } else if (currentMode === 'video') {
      await handleVideoGeneration(bot, msg);
    } else {
      await handleTextGeneration(bot, msg, user);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleTextMessage:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.',
    );
  }
}

// handleVideoGeneration and handleTextGeneration are delegated to flows

// handleVoiceMessage exported from flows/voice.ts

export async function handlePhotoMessage(bot: TelegramBot, msg: TgMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!userId || !msg.photo) {
    return;
  }

  try {
    const user = await findUser(userId);
    if (!user) return;
    const allowed = await canConsumeRequest(userId, 'text_req_left');
    if (!allowed) {
      const stats = await getUserStats(userId);
      await bot.sendMessage(
        chatId,
        `‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n–û—Å—Ç–∞–ª–æ—Å—å: –¢–µ–∫—Å—Ç ${stats?.text_req_left ?? 0}, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${stats?.image_req_left ?? 0}, –í–∏–¥–µ–æ ${stats?.video_req_left ?? 0}`,
      );
      return;
    }

    // Check terms acceptance
    const termsAccepted = await hasAcceptedTerms(userId);
    if (!termsAccepted) {
      await showTermsOfService(bot, chatId, userId);
      return;
    }

    await bot.sendChatAction(chatId, 'typing');

    if (!msg.photo || msg.photo.length === 0 || !userId) {
      await bot.sendMessage(chatId, '‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const photoId = msg.photo[msg.photo.length - 1]!.file_id;
    const fileLink = await bot.getFileLink(photoId);

    // Set MIME type for image processing
    const analysis = await analyzeImage(
      fileLink,
      msg.caption ?? 'caption: \n\nanswer in russian language if other not specified!',
    );

    await bot.sendMessage(chatId, analysis, {
      parse_mode: 'Markdown',
      reply_markup: createMainKeyboard(),
    });

    await decreaseRequests(userId, 'text_req_left');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handlePhotoMessage:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
  }
}

// handleCallbackQuery delegated to flows/callbacks.ts

export async function handlePreCheckoutQuery(
  bot: TelegramBot,
  preCheckoutQuery: any,
): Promise<void> {
  await handlePreCheckout(bot, preCheckoutQuery);
}

export async function handleSuccessfulPaymentMessage(
  bot: TelegramBot,
  message: any,
): Promise<void> {
  await handleSuccessfulPayment(bot, message);
}
