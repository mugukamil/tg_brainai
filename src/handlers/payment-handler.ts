import type { TelegramLikeBot as TelegramBot } from '../tg-client.js';
import { setPremium, getUserStats } from './supabase-handler.js';
import type { PaymentInvoice } from '../types/index.js';
import { logInteraction } from '../utils/logger.js';

/**
 * Create invoice for premium subscription
 */
export async function sendPremiumInvoice(bot: TelegramBot, chatId: number): Promise<void> {
  try {
    const invoice: PaymentInvoice = {
      title: '–ü—Ä–µ–º–∏—É–º',
      description:
        '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ | 1000 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, 10 –≤–∏–¥–µ–æ –Ω–∞ 1 –º–µ—Å—è—Ü',
      payload: JSON.stringify({ type: 'premium', duration: 'monthly' }),
      provider_token: '', // Empty for Telegram Stars
      currency: 'XTR', // Telegram Stars
      prices: [
        {
          label: '–ü—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü',
          amount: 1,
        },
      ],
      start_parameter: 'premium_subscription',
      // photo_url: 'https://placeholder.co/512x512?text=Premium',
      // photo_size: 512,
      // photo_width: 512,
      // photo_height: 512,
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false,
    };

    console.log('Sending invoice to chat:', chatId, 'with params:', invoice);

    await bot.sendInvoice(
      chatId,
      invoice.title,
      invoice.description,
      invoice.payload,
      invoice.provider_token,
      invoice.currency,
      invoice.prices,
      {
        start_parameter: invoice.start_parameter,
        photo_url: invoice.photo_url,
        photo_size: invoice.photo_size,
        photo_width: invoice.photo_width,
        photo_height: invoice.photo_height,
        need_name: invoice.need_name,
        need_phone_number: invoice.need_phone_number,
        need_email: invoice.need_email,
        need_shipping_address: invoice.need_shipping_address,
        is_flexible: invoice.is_flexible,
      },
    );

    console.log('Invoice sent successfully to chat:', chatId);

    await logInteraction({
      userId: chatId,
      chatId,
      direction: 'bot',
      type: 'other',
      content: 'sendInvoice',
      meta: { invoice },
    });
  } catch (error) {
    console.error('Error sending invoice:', error);
    console.error('Error details:', {
      message: (error as any)?.message,
      stack: (error as any)?.stack,
      response: (error as any)?.response,
      data: (error as any)?.response?.data,
    });

    // Send user-friendly error message
    try {
      await bot.sendMessage(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n' +
          'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n' +
          '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n' +
          '‚Ä¢ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Telegram\n' +
          '‚Ä¢ Telegram Stars –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ',
      );
    } catch (msgError) {
      console.error('Failed to send error message to user:', msgError);
    }

    throw error; // Re-throw to maintain existing error handling flow
  }
}

/**
 * Handle pre-checkout query
 */
export async function handlePreCheckout(bot: TelegramBot, preCheckoutQuery: any): Promise<void> {
  try {
    console.log('=== PRE-CHECKOUT QUERY RECEIVED ===');
    console.log('Full preCheckoutQuery object:', JSON.stringify(preCheckoutQuery, null, 2));

    const { id, from, invoice_payload } = preCheckoutQuery;

    if (!from) {
      console.error('No from user data in pre-checkout query');
      await bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
      });
      return;
    }

    console.log(`Pre-checkout from user ${from.id}: ${invoice_payload}`);
    console.log('User data:', JSON.stringify(from, null, 2));
    await logInteraction({
      userId: from.id,
      chatId: preCheckoutQuery.from.id,
      direction: 'user',
      type: 'other',
      content: 'pre_checkout_query',
      meta: { invoice_payload },
    });

    // Parse payload to verify the purchase
    let payload;
    try {
      console.log('Attempting to parse invoice_payload:', invoice_payload);
      payload = JSON.parse(invoice_payload);
      console.log('Parsed payload:', payload);
    } catch (error) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞:', error);
      await bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞',
      });
      return;
    }

    // Validate the purchase
    if (payload.type === 'premium') {
      console.log('Premium purchase detected, checking user stats...');
      // Check if user exists
      const userStats = await getUserStats(from.id);
      console.log('User stats:', userStats);
      if (!userStats) {
        await bot.answerPreCheckoutQuery(id, false, {
          error_message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.',
        });
        return;
      }

      // Approve the payment
      console.log('Approving pre-checkout query with id:', id);
      await bot.answerPreCheckoutQuery(id, true);
      console.log('Pre-checkout query approved successfully');
      await logInteraction({
        userId: from.id,
        chatId: from.id,
        direction: 'system',
        type: 'other',
        content: 'pre_checkout_ok',
        meta: { invoice_payload: payload },
      });
    } else {
      await bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏',
      });
    }
  } catch (error) {
    console.error('Error handling pre-checkout:', error);
    console.error('Error details:', {
      message: (error as any)?.message,
      stack: (error as any)?.stack,
      response: (error as any)?.response,
    });
    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
      error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    });
  }
}

/**
 * Handle successful payment
 */
export async function handleSuccessfulPayment(bot: TelegramBot, message: any): Promise<void> {
  try {
    const { chat, from } = message;
    const successfulPayment = message.successful_payment;
    if (!successfulPayment) {
      console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ');
      return;
    }
    const { invoice_payload, total_amount, currency } = successfulPayment;

    console.log(`Successful payment from user ${from?.id}: ${total_amount} ${currency}`);
    await logInteraction({
      userId: from?.id || 0,
      chatId: chat.id,
      direction: 'system',
      type: 'other',
      content: 'successful_payment',
      meta: { total_amount, currency, invoice_payload },
    });

    // Parse the payload
    let payload;
    try {
      payload = JSON.parse(invoice_payload);
    } catch (error) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –≤ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ:', error);
      await bot.sendMessage(chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }

    if (payload.type === 'premium') {
      // Set user as premium
      if (!from) {
        console.error('No from user data in successful payment');
        return;
      }
      const success = await setPremium(from.id);

      if (success) {
        await bot.sendMessage(
          chat.id,
          'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π –ü—Ä–µ–º–∏—É–º!\n\n' +
            '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞\n' +
            'üìä –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n' +
            '‚Ä¢ 1000 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n' +
            '‚Ä¢ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n' +
            '‚Ä¢ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ\n\n' +
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíô',
        );
        await logInteraction({
          userId: from.id,
          chatId: chat.id,
          direction: 'bot',
          type: 'text',
          content: 'premium_welcome',
        });

        // Log the successful upgrade
        console.log(`User ${from.id} upgraded to premium successfully`);
      } else {
        await bot.sendMessage(
          chat.id,
          '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–∫–∏.',
        );
        console.error(`Failed to set premium status for user ${from.id}`);
      }
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏:', payload.type);
      await bot.sendMessage(chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleSuccessfulPayment:', error);
    await bot.sendMessage(
      message.chat.id,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    );
  }
}

/**
 * Show pricing information
 */
export async function showPricing(bot: TelegramBot, chatId: number): Promise<void> {
  try {
    const pricingMessage =
      'üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞**\n\n' +
      'üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω:**\n' +
      '‚Ä¢ 100 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n' +
      '‚Ä¢ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü\n' +
      '‚Ä¢ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ –≤ –º–µ—Å—è—Ü\n\n' +
      '‚≠ê **–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (100 ‚≠ê):**\n' +
      '‚Ä¢ 1000 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n' +
      '‚Ä¢ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü\n' +
      '‚Ä¢ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ –≤ –º–µ—Å—è—Ü\n' +
      '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n' +
      '‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n\n' +
      'üí´ Telegram Stars - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram\n' +
      '–ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏';

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚≠ê –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º (100 ‚≠ê)',
            callback_data: JSON.stringify({ action: 'buy_premium' }),
          },
        ],
        [
          {
            text: 'üí∞ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram Stars?',
            callback_data: JSON.stringify({ action: 'how_to_buy_stars' }),
          },
        ],
      ],
    };

    await bot.sendMessage(chatId, pricingMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ showPricing:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö.');
  }
}

/**
 * Show how to buy Telegram Stars
 */
export async function showHowToBuyStars(bot: TelegramBot, chatId: number): Promise<void> {
  try {
    const starsMessage =
      'üí´ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram Stars:**\n\n' +
      '1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —á–∞—Ç –≤ Telegram\n' +
      '2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É (üìé) –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π\n' +
      "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥–∞—Ä–æ–∫' –∏–ª–∏ 'Gift'\n" +
      "4. –í—ã–±–µ—Ä–∏—Ç–µ '–ö—É–ø–∏—Ç—å Stars'\n" +
      '5. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars\n' +
      '6. –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n\n' +
      'üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n' +
      '‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n' +
      '‚Ä¢ Google Pay / Apple Pay\n' +
      '‚Ä¢ –ò –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n\n' +
      '‚ö° Stars –ø–æ—Å—Ç—É–ø—è—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç';

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ü–µ–Ω–∞–º',
            callback_data: JSON.stringify({ action: 'show_pricing' }),
          },
        ],
      ],
    };

    await bot.sendMessage(chatId, starsMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ showHowToBuyStars:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
  }
}

/**
 * Handle payment-related callback queries
 */
export async function handlePaymentCallback(
  bot: TelegramBot,
  callbackQuery: any,
): Promise<boolean> {
  try {
    const { data, message, from } = callbackQuery;

    if (!data || !message || !from) {
      return false;
    }
    const chatId = message.chat.id;

    let parsedData;
    try {
      parsedData = JSON.parse(data);
    } catch {
      return false; // Not a payment callback
    }

    const { action } = parsedData;

    switch (action) {
      case 'buy_premium':
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...',
        });
        try {
          await sendPremiumInvoice(bot, chatId);
        } catch (error) {
          console.error('Failed to send premium invoice from callback:', error);
          // Error message already sent to user in sendPremiumInvoice
        }
        return true;

      case 'show_pricing':
        await bot.answerCallbackQuery(callbackQuery.id);
        await bot.editMessageText('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö...', {
          chat_id: chatId,
          message_id: message.message_id,
        });
        await showPricing(bot, chatId);
        await bot.deleteMessage(chatId, message.message_id);
        return true;

      case 'how_to_buy_stars':
        await bot.answerCallbackQuery(callbackQuery.id);
        await showHowToBuyStars(bot, chatId);
        return true;

      default:
        return false; // Not a payment callback
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handlePaymentCallback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      show_alert: true,
    });
    return true;
  }
}

/**
 * Check user's payment status and show appropriate message
 */
export async function checkPaymentStatus(
  bot: TelegramBot,
  chatId: number,
  userId: number,
): Promise<void> {
  try {
    const userStats = await getUserStats(userId);

    if (!userStats) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const statusMessage = userStats.is_premium
      ? '‚≠ê **–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω**\n\n' +
        `üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n` +
        `‚Ä¢ –¢–µ–∫—Å—Ç: ${userStats.text_req_left}\n` +
        `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${userStats.image_req_left}\n` +
        `‚Ä¢ –í–∏–¥–µ–æ: ${userStats.video_req_left}`
      : 'üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω**\n\n' +
        `üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n` +
        `‚Ä¢ –¢–µ–∫—Å—Ç: ${userStats.text_req_left}\n` +
        `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${userStats.image_req_left}\n` +
        `‚Ä¢ –í–∏–¥–µ–æ: ${userStats.video_req_left}\n\n` +
        `üíé –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ü—Ä–µ–º–∏—É–º!`;

    const keyboard = userStats.is_premium
      ? {
          inline_keyboard: [
            [
              {
                text: 'üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                callback_data: JSON.stringify({ action: 'refresh_stats' }),
              },
            ],
          ],
        }
      : {
          inline_keyboard: [
            [
              {
                text: '‚≠ê –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º',
                callback_data: JSON.stringify({ action: 'buy_premium' }),
              },
            ],
          ],
        };

    await bot.sendMessage(chatId, statusMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ checkPaymentStatus:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
  }
}
