import type { TelegramLikeBot as TelegramBot } from '../../tg-client.js';
import {
  isAvailable as isVideoAvailable,
  parseVideoCommand,
  validateParams as validateVideoParams,
  generateVideo,
  getPredictionStatus,
} from '../video-handler.js';
import { decreaseRequests, canConsumeRequest } from '../supabase-handler.js';
import { safeEditMessageText } from '../handler-utils.js';
import { logInteraction } from '../../utils/logger.js';

// Helper function to detect media type from URL
function getMediaType(url: string): 'video' | 'animation' | 'document' {
  const urlLower = url.toLowerCase();

  // Check file extension
  const extension = url.split('.').pop()?.split('?')[0]?.toLowerCase();

  // GIF detection
  if (extension === 'gif' || urlLower.includes('.gif') || urlLower.includes('format=gif')) {
    return 'animation';
  }

  // Video formats
  if (['mp4', 'mov', 'avi', 'webm', 'mkv'].includes(extension || '')) {
    return 'video';
  }

  // Check URL patterns
  if (urlLower.includes('/gif/') || urlLower.includes('type=gif')) {
    return 'animation';
  }

  // Default to video for Kling outputs
  return 'video';
}

export async function handleVideoGeneration(bot: TelegramBot, msg: any): Promise<void> {
  const chatId = msg.chat.id;
  const text = msg.text;
  if (!text) return;
  if (!isVideoAvailable()) {
    await bot.sendMessage(
      chatId,
      '‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    );
    return;
  }
  const userId = msg.from?.id;
  if (!userId) return;
  const canUse = await canConsumeRequest(userId, 'video_req_left' as any);
  if (!canUse) {
    await bot.sendMessage(
      chatId,
      '‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–∏–¥–µ–æ-–∑–∞–ø—Ä–æ—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ú® –ü—Ä–µ–º–∏—É–º.',
    );
    return;
  }
  const params = parseVideoCommand(text);
  const validation = validateVideoParams(params);
  if (!validation.valid) {
    await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n${validation.errors.join('\n')}`);
    return;
  }
  const statusMsg = await bot.sendMessage(chatId, 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞...');
  try {
    await logInteraction({
      userId: userId!,
      chatId,
      direction: 'user',
      type: 'video',
      content: params.prompt,
    });
    const start = await generateVideo(params.prompt, params);
    if (!start.success || !start.data?.prediction_id) {
      await safeEditMessageText(
        bot,
        chatId,
        statusMsg.message_id,
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${start.error?.message ?? 'unknown'}`,
      );
      return;
    }
    const id = start.data.prediction_id;
    let attempts = 0;
    const maxAttempts = 180; // up to 15 min at 5s interval
    let lastStatus = '';
    let transientErrors = 0;
    const maxTransientErrors = 5;
    const timer = setInterval(async () => {
      attempts++;
      try {
        const st = await getPredictionStatus(id);
        if (!st.success) {
          transientErrors++;
          if (transientErrors >= maxTransientErrors) {
            clearInterval(timer);
            await safeEditMessageText(
              bot,
              chatId,
              statusMsg.message_id,
              `‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${st.error?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            );
            return;
          }
          return; // skip this tick, continue polling
        }
        transientErrors = 0;
        const status = st.data?.status ?? 'processing';
        if (status !== lastStatus) {
          lastStatus = status;
          await safeEditMessageText(bot, chatId, statusMsg.message_id, `üé¨ –°—Ç–∞—Ç—É—Å: ${status}`);
        }
        if (status === 'succeeded') {
          clearInterval(timer);
          const url = Array.isArray(st.data?.output) ? st.data?.output[0] : undefined;
          if (url) {
            const mediaType = getMediaType(url);
            const caption = `üé¨ ${mediaType === 'animation' ? '–ê–Ω–∏–º–∞—Ü–∏—è' : '–í–∏–¥–µ–æ'} –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${params.prompt}`;

            console.log(`Sending media as ${mediaType}:`, url);

            try {
              switch (mediaType) {
                case 'animation':
                  await bot.sendAnimation(chatId, url, { caption });
                  break;
                case 'video':
                  await bot.sendVideo(chatId, url, {
                    caption,
                    duration: params.duration,
                    supports_streaming: true,
                    width: 1280,
                    height: 720,
                  });
                  break;
                case 'document':
                  await bot.sendDocument(chatId, url, { caption });
                  break;
              }
            } catch (sendError) {
              console.error(`Failed to send as ${mediaType}, trying as document:`, sendError);
              // Fallback to document if specific method fails
              try {
                await bot.sendDocument(chatId, url, {
                  caption: `üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª: ${params.prompt}`,
                });
              } catch (docError) {
                console.error('Failed to send as document:', docError);
                // Last resort: send URL as text
                await bot.sendMessage(
                  chatId,
                  `‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${url}\n\n–ó–∞–ø—Ä–æ—Å: ${params.prompt}`,
                );
              }
            }
            await logInteraction({
              userId: userId!,
              chatId,
              direction: 'bot',
              type: 'video',
              content: url,
              meta: { prompt: params.prompt },
            });
            await decreaseRequests(userId, 'video_req_left' as any, 1);
            try {
              await bot.deleteMessage(chatId, statusMsg.message_id);
            } catch {}
          } else {
            await logInteraction({
              userId: userId!,
              chatId,
              direction: 'bot',
              type: 'video',
              content: '‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω.',
              meta: { prompt: params.prompt },
            });
            await safeEditMessageText(
              bot,
              chatId,
              statusMsg.message_id,
              '‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, –Ω–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω.',
            );
          }
        } else if (status === 'failed') {
          await logInteraction({
            userId: userId!,
            chatId,
            direction: 'bot',
            type: 'video',
            content: '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.',
            meta: { prompt: params.prompt },
          });
          clearInterval(timer);
          await safeEditMessageText(
            bot,
            chatId,
            statusMsg.message_id,
            '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.',
          );
        } else if (attempts >= maxAttempts) {
          clearInterval(timer);
          await safeEditMessageText(
            bot,
            chatId,
            statusMsg.message_id,
            '‚è∞ –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          );
        }
      } catch (e: any) {
        console.log(e);
        await logInteraction({
          userId: userId!,
          chatId,
          direction: 'bot',
          type: 'video',
          content: e.message,
        });
        clearInterval(timer);
        await safeEditMessageText(
          bot,
          chatId,
          statusMsg.message_id,
          '‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ.',
        );
      }
    }, 5000);
  } catch (e: any) {
    await safeEditMessageText(
      bot,
      chatId,
      statusMsg.message_id,
      `‚ùå –û—à–∏–±–∫–∞: ${e?.message ?? 'unknown'}`,
    );
  }
}
