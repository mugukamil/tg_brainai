import type { TelegramLikeBot as TelegramBot } from '../tg-client.js';
import type { TelegramMessage } from '@/types/index.js';
import { findUser, canConsumeRequest, getUserStats } from '@/handlers/supabase-handler.js';
import { transcribeAudio } from '@/handlers/openai-handler.js';
import { handleTextGeneration } from './text.js';

export async function handleVoiceMessage(bot: TelegramBot, msg: TelegramMessage): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  if (!userId) return;
  try {
    const user = await findUser(userId);
    if (!user) return;
    const allowed = await canConsumeRequest(userId, 'text_req_left');
    if (!allowed) {
      const stats = await getUserStats(userId);
      await bot.sendMessage(
        chatId,
        `‚ùå –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: –¢–µ–∫—Å—Ç ${stats?.text_req_left ?? 0}`,
      );
      return;
    }
    await bot.sendChatAction(chatId, 'typing');
    if (!msg.voice) {
      await bot.sendMessage(chatId, '‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    const fileId = msg.voice.file_id;
    const fileLink = await bot.getFileLink(fileId);
    const transcription = await transcribeAudio(fileLink);
    if (transcription?.text) {
      const syntheticMsg = { ...msg, text: transcription.text, from: msg.from };
      await bot.sendMessage(chatId, `üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${transcription.text}"`);
      await handleTextGeneration(bot, syntheticMsg, user);
    } else {
      await bot.sendMessage(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleVoiceMessage:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
}
