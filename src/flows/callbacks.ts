import type { TelegramLikeBot as TelegramBot } from '../tg-client.js';
import type {
  CallbackData,
  ImageProvider,
  TelegramCallbackQuery,
  FileOptions,
} from '@/types/index.js';
import {
  findUser,
  canConsumeRequest,
  decreaseRequests,
  getUserStats,
  updateUser,
} from '@/handlers/supabase-handler.js';
import { getTaskStatus, upscaleImage } from '@/handlers/goapi-handler.js';
import { safeEditMessageText, fetchImageBuffer } from '@/handlers/handler-utils.js';
import { logInteraction } from '@/utils/logger.js';
import { handlePaymentCallback } from '@/handlers/payment-handler.js';
import { handleTermsCallback } from '@/handlers/terms-handler.js';
import { createMainKeyboard } from '@/handlers/handler-utils.js';

export async function handleCallbackQuery(
  bot: TelegramBot,
  callbackQuery: TelegramCallbackQuery,
): Promise<void> {
  const msg = callbackQuery.message;
  if (!msg) return;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;

  try {
    const paymentHandled = await handlePaymentCallback(bot, callbackQuery as any);
    if (paymentHandled) return;
  } catch {}
  try {
    const termsHandled = await handleTermsCallback(bot, callbackQuery);
    if (termsHandled) return;
  } catch {}

  if (!callbackQuery.data) return;
  let data: CallbackData;
  try {
    data = JSON.parse(callbackQuery.data);
  } catch {
    // Not a JSON callback, ignore silently
    return;
  }

  // Handle provider switching
  if (data.action === 'set_provider') {
    const provider = data.provider as ImageProvider;
    if (provider === 'goapi' || provider === 'fal-ai') {
      try {
        await updateUser(userId, { image_provider: provider });

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: provider === 'goapi' ? '‚úÖ (Midjourney)' : '(Midjourney)',
                callback_data: JSON.stringify({ action: 'set_provider', provider: 'goapi' }),
              },
            ],
            [
              {
                text: provider === 'fal-ai' ? 'üçå (Nano Banana)' : '(Nano Banana)',
                callback_data: JSON.stringify({ action: 'set_provider', provider: 'fal-ai' }),
              },
            ],
            [
              {
                text: 'üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
                callback_data: JSON.stringify({ action: 'proceed_to_generation' }),
              },
            ],
            [
              {
                text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: JSON.stringify({ action: 'back_to_main' }),
              },
            ],
          ],
        };

        try {
          await bot.editMessageText(
            `üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n` +
              `**–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** ${provider === 'goapi' ? '(Midjourney)' : 'üçå (Nano Banana)'}\n\n` +
              `**(Midjourney):**\n` +
              `‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n` +
              `‚Ä¢ –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n` +
              `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ upscale –∏ –≤–∞—Ä–∏–∞—Ü–∏–π\n` +
              `‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n` +
              `**(Nano Banana):**\n` +
              `‚Ä¢ –§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n` +
              `‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n` +
              `‚Ä¢ –•–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n` +
              `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`,
            {
              chat_id: chatId,
              message_id: msg.message_id,
              parse_mode: 'Markdown',
              reply_markup: keyboard,
            },
          );
        } catch (editError) {
          console.error('Error editing message:', editError);
        }

        await bot.answerCallbackQuery(callbackQuery.id, {
          text: `–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${provider === 'goapi' ? '(Midjourney)' : 'üçå (Nano Banana)'}`,
        });
      } catch (error) {
        console.error('Error updating image provider:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞',
          show_alert: true,
        });
      }
    }
    return;
  }

  // Handle back to main menu
  if (data.action === 'back_to_main') {
    try {
      await bot.editMessageText('ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
        chat_id: chatId,
        message_id: msg.message_id,
      });
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: createMainKeyboard(),
      });
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('Error returning to main menu:', error);
    }
    return;
  }

  // Handle video provider info
  if (data.action === 'video_provider_info') {
    try {
      await bot.editMessageText(
        `üé¨ **Kling 2.5 Turbo Pro - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ**\n\n` +
          `**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n` +
          `‚Ä¢ üéØ –ú–æ–¥–µ–ª—å: Kling 2.5 Turbo Pro\n` +
          `‚Ä¢ ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5-10 —Å–µ–∫—É–Ω–¥\n` +
          `‚Ä¢ üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9, 9:16, 1:1\n` +
          `‚Ä¢ üé® –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –¥–æ 1080p\n\n` +
          `**–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n` +
          `‚Ä¢ üìù **Text-to-Video** - —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω—É–ª—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n` +
          `‚Ä¢ üñºÔ∏è **Image-to-Video** - –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n` +
          `**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n` +
          `‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (30-90 —Å–µ–∫—É–Ω–¥)\n` +
          `‚Ä¢ üé≠ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n` +
          `‚Ä¢ üß† –£–º–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤\n` +
          `‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
        },
      );
      // Send keyboard with separate message
      await bot.sendMessage(chatId, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
                callback_data: JSON.stringify({ action: 'back_to_video' }),
              },
            ],
            [
              {
                text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: JSON.stringify({ action: 'back_to_main' }),
              },
            ],
          ],
        },
      });
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('Error showing video provider info:', error);
    }
    return;
  }

  // Handle back to video generation
  if (data.action === 'back_to_video') {
    try {
      await bot.editMessageText(
        `üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n` +
          `**–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** Kling 2.5 Turbo Pro\n\n` +
          `**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n` +
          `‚Ä¢ üìù Text-to-Video - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n` +
          `‚Ä¢ üñºÔ∏è Image-to-Video - –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n` +
          `‚Ä¢ ‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5-10 —Å–µ–∫—É–Ω–¥\n` +
          `‚Ä¢ üé® –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏\n` +
          `‚Ä¢ ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞\n\n` +
          `**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n` +
          `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n` +
          `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ—Ç–æ\n\n` +
          `–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é üëá`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
        },
      );
      // Send keyboard with separate message
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ Kling 2.5 Turbo Pro',
                callback_data: JSON.stringify({ action: 'video_provider_info' }),
              },
            ],
            [
              {
                text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: JSON.stringify({ action: 'back_to_main' }),
              },
            ],
          ],
        },
      });
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('Error returning to video generation:', error);
    }
    return;
  }

  // Handle proceed to image generation
  if (data.action === 'proceed_to_generation') {
    try {
      await bot.editMessageText(
        `‚úÖ **–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!**\n\n` +
          `–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n` +
          `**–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:**\n` +
          `‚Ä¢ "–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"\n` +
          `‚Ä¢ "–ö–æ—Ç –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –∫–æ—Å—Ç—é–º–µ"\n` +
          `‚Ä¢ "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥"\n` +
          `‚Ä¢ "–ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ"\n\n` +
          `üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç —Å–µ–π—á–∞—Å!**`,
        {
          chat_id: chatId,
          message_id: msg.message_id,
        },
      );
      // Send main keyboard for navigation
      await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', {
        reply_markup: createMainKeyboard(),
      });
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('Error showing generation instructions:', error);
    }
    return;
  }

  const { t_id: taskId, idx: index } = data;
  if (index === undefined) {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å',
      show_alert: true,
    });
    return;
  }
  const user = await findUser(userId);
  if (!user) return;
  const canUse = await canConsumeRequest(userId, 'image_req_left');
  if (!canUse) {
    const stats = await getUserStats(userId);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: `‚ùå –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${stats?.image_req_left ?? 0}`,
      show_alert: true,
    });
    return;
  }
  await bot.answerCallbackQuery(callbackQuery.id, { text: `Processing upscale ${index}...` });
  const statusMsg = await bot.sendMessage(chatId, `‚Üó –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ...`);
  try {
    if (!taskId) {
      await safeEditMessageText(bot, chatId, statusMsg.message_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π task ID');
      return;
    }
    const upscaleResult = await upscaleImage(taskId, index);
    if (!upscaleResult.success) {
      await safeEditMessageText(
        bot,
        chatId,
        statusMsg.message_id,
        `‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å: ${upscaleResult.error?.message}`,
      );
      return;
    }
    const newTaskId = upscaleResult.data?.data?.task_id;
    if (!newTaskId) {
      await safeEditMessageText(
        bot,
        chatId,
        statusMsg.message_id,
        '‚ùå –ù–µ—Ç task ID —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      );
      return;
    }
    const maxAttempts = 40;
    let attempts = 0;
    const pollInterval = setInterval(async () => {
      try {
        attempts++;
        const statusResult = await getTaskStatus(newTaskId);
        if (statusResult.success) {
          const taskData = statusResult.data?.data;
          if (!taskData) return;
          const status = taskData.status;
          if (status === 'completed') {
            clearInterval(pollInterval);
            const imageUrl = taskData.output.image_url;
            if (imageUrl) {
              try {
                const { buffer, filename, contentType } = await fetchImageBuffer(imageUrl);
                const fileOptions: FileOptions = contentType
                  ? { filename, contentType }
                  : { filename };
                await bot.sendPhoto(
                  chatId,
                  buffer,
                  { caption: `‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}` },
                  fileOptions,
                );
              } catch {
                await bot.sendPhoto(chatId, imageUrl, {
                  caption: `‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}`,
                });
              }
              await logInteraction({
                userId,
                chatId,
                direction: 'bot',
                type: 'image',
                content: imageUrl,
                meta: { upscaledIndex: index },
              });
              try {
                await bot.deleteMessage(chatId, statusMsg.message_id);
              } catch {}
              await decreaseRequests(userId, 'image_req_left', 1);
            } else {
              await safeEditMessageText(
                bot,
                chatId,
                statusMsg.message_id,
                '‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
              );
            }
          } else if (status === 'failed') {
            clearInterval(pollInterval);
            await safeEditMessageText(
              bot,
              chatId,
              statusMsg.message_id,
              '‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å',
            );
          } else if (attempts >= maxAttempts) {
            clearInterval(pollInterval);
            await safeEditMessageText(
              bot,
              chatId,
              statusMsg.message_id,
              '‚è∞ –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            );
          }
        }
      } catch (error) {
        clearInterval(pollInterval);
        console.error('–û—à–∏–±–∫–∞ –≤ polling —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      }
    }, 5000);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleCallbackQuery:', error);
    await safeEditMessageText(bot, chatId, statusMsg.message_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
  }
}
